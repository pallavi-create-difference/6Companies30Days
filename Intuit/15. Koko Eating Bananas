class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int n=piles.size(),high=INT_MIN;
        for(int i=0;i<piles.size();i++)high=max(high,piles[i]);
        int low=0;
       int mn=INT_MAX;
        while(low<=high){
             int ans=0;
            int mid=(low+high)/2;
            if(mid==0)return mn;
            cout<<low<<" "<<high<<" "<<mid<<" ";
            for(auto i:piles){
                int rem=i%mid==0?0:1;
                ans+=rem;
                ans+=i/mid;
            }
            cout<<ans<<endl;
            if(ans<=h){
                if(mn>mid)
                  mn=mid;
                high=mid-1;
            }
            else {
               
                low=mid+1;
            }
        }
        return mn;
        }
        };
