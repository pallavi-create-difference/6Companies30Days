class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<int,int>> q;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    q.push({i,j});
                }
                }
        }
        if(q.size()==0)return -1;
        if(q.size()==n*n)return -1;
        int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};
        int d=0;
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
              pair<int,int> temp=q.front();
                q.pop();
                int x=temp.first;
                int y=temp.second;
                for(int k=0;k<4;k++){
                    int next_x=x+dir[k][0];
                    int next_y=y+dir[k][1];
                    if(next_x>=0 && next_x<m && next_y>=0 && next_y<n && grid[next_x][next_y]==0){
                        grid[next_x][next_y]=1;
                        q.push({next_x,next_y});
                        //cout<<next_x<<" "<<next_y<<d<<" "<<endl;
                        
                    }
                }
            }
            d++;
            //cout<<d<<" "<<endl;
        }
        return d-1;
    }
};
