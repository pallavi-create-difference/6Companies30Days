class Solution {
  public:
  Node* solve(map<Node*,Node*> &mp,Node* root, int target){
        queue<Node*> q;
        q.push(root);
        Node* ans;
        while(!q.empty()){
          Node* temp=q.front();
          if(temp->data==target){
              ans=temp;
          }
          q.pop();
          if(temp->left!=NULL){
              mp[temp->left]=temp;
              q.push(temp->left);
          }
          if(temp->right!=NULL){
              mp[temp->right]=temp;
              q.push(temp->right);
          }
        }
        return ans;
    }
  int findTime(map<Node*,Node*> &mp,Node* target){
      int t=0;
      queue<Node*> q;
      map<Node*,int> vis;
      q.push(target);
      vis[target]=1;
      while(!q.empty()){
          int sz=q.size();
          int check=0;
          for(int i=0;i<sz;i++){
          Node* temp=q.front();
          q.pop();
          if(temp->left!=NULL && !vis[temp->left]){
              check=1;
              vis[temp->left]=1;
              
              q.push(temp->left);
          }
          if(temp->right!=NULL && !vis[temp->right]){
              check=1;
              vis[temp->right]=1;
              
              q.push(temp->right);
          }
          if(mp[temp] && !vis[mp[temp]]){
              check=1;
              vis[mp[temp]]=1;
              
              q.push(mp[temp]);
          }
          }
          if(check)
              t++;
          
      }
      return t;
      
  }
    
    int minTime(Node* root, int target) 
    {
        if(root==NULL)return 0;
        map<Node*,Node*> mp;
        Node* trgt=solve(mp,root,target);
        int mtime=findTime(mp,trgt);
        return mtime;
    }
};
